---
interface Props {
  variant?: "standard" | "paddinglessDesktop" | "prose"; // Define any variants you need
  class?: string; // Optional prop for additional classes
  id?: string; // Optional prop for additional classes
}
const { variant = "standard", class: extraClass = "" } = Astro.props;
// Map each variant to its specific classes
const variantClasses = {
  // Standard wrapper
  standard: " 2xl:px-12 w-full px-8   overflow-hidden xl:overflow-visible",
  paddinglessDesktop:
    "mx-auto max-w-6xl px-4 xl:px-0  overflow-hidden xl:overflow-visible",

  // Prose styles
  prose:
    "prose text-base-400 prose-blockquote:border-l-accent prose-a:border-white prose-a:border-b prose-a:no-underline prose-a:text-white   prose-a:transition-colors prose-a:duration-200 prose-a:hover:border-solid   prose-a:hover:text-accent-500 prose-headings:font-medium prose-headings:text-white prose-pre:border prose-li:marker:text-accent-400  max-w-none  prose-pre:rounded-xl w-full prose-blockquote:text-base-500  prose-pre:border-base-300 prose-ul:[list-style-type:'///'] prose-pre:scrollbar-hide prose-tr:border-base-800 prose-thead:border-base-800 prose-strong:text-white",
};
// Combine the classes for the specified variant with any extra classes
const classes = `${variantClasses[variant]} ${extraClass}`.trim();
---

<div class={classes}>
  <slot />
</div>
