---
// Components
import Text from "@/components/foundations/elements/Text.astro";
import Button from "@/components/foundations/elements/Button.astro";
import Wrapper from "@/components/foundations/containers/Wrapper.astro";
// Icons (import all used ones)
import Check from "@/components/foundations/icons/Check.astro";
import X from "@/components/foundations/icons/X.astro";
import Minus from "@/components/foundations/icons/Minus.astro";
const pricingOptions = [
  {
    id: "Pro",
    cardClass: "bg-green",
    primaryTextColor: "text-black",
    secondaryTextColor: "text-black",
    featuresBorderColor: "border-black",
    title: "Pro",
    monthly: "$29.00",
    annual: "$19.00",
    description: "For solo users managing portfolios and exploring DeFi tools.",
    button: {
      text: "Get Started",
      variant: "default",
    },
    features: [
      { text: "Multi-wallet support" },
      { text: "Basic portfolio dashboard" },
      { text: "On-chain transaction history" },
      { text: "Gas fee estimator" },
      { text: "Secure wallet integration" },
      { text: "Email support" },
      { text: "Mobile-friendly UI" },
    ],
  },
  {
    id: "Scale",
    cardClass: "bg-yellow",
    primaryTextColor: "text-black",
    secondaryTextColor: "text-black",
    featuresBorderColor: "border-black",
    title: "Scale",
    monthly: "$49.00",
    annual: "$39.00",
    description: "For small teams and DAOs scaling DeFi infrastructure.",
    button: {
      text: "Get Started",
      variant: "default",
    },
    features: [
      { text: "Real-time portfolio sync" },
      { text: "Multi-chain analytics" },
      { text: "Smart contract interaction UI" },
      { text: "Wallet permissions management" },
      { text: "Yield farming dashboard" },
      { text: "DAO tooling & voting modules" },
      { text: "Email + Chat support" },
      { text: "Team access + roles" },
      { text: "Basic automations" },
      { text: "Cold wallet tracking" },
    ],
  },
  {
    id: "Enterprise",
    cardClass: "bg-pink",
    primaryTextColor: "text-black",
    secondaryTextColor: "text-black",
    featuresBorderColor: "border-black",
    title: "Enterprise",
    monthly: "$99.00",
    annual: "$79.00",
    description:
      "For DeFi platforms and large funds managing complex operations.",
    button: {
      text: "Upgrade Now",
      variant: "default",
    },
    features: [
      { text: "Unlimited wallets & chains" },
      { text: "Custom smart contract tooling" },
      { text: "Enterprise-grade security & audits" },
      { text: "Live blockchain data stream" },
      { text: "Premium integrations & APIs" },
      { text: "Priority onboarding & migration" },
      { text: "Dedicated success manager" },
    ],
  },
];
// Table
const pricingFeatures = [
  {
    category: "Wallet & Transaction Tools",
    features: [
      { label: "Multi-wallet support", values: ["yes", "yes", "yes"] },
      {
        label: "Multi-chain support",
        values: ["Ethereum only", "Multi-chain", "All major chains"],
      },
      { label: "Gas fee estimation", values: ["yes", "yes", "yes"] },
      { label: "Cold wallet tracking", values: ["no", "yes", "yes"] },
      { label: "Token swap interface", values: ["yes", "yes", "yes"] },
      { label: "Transaction batching", values: ["no", "yes", "yes"] },
      {
        label: "Smart contract interaction",
        values: ["Basic", "Advanced", "Custom"],
      },
      { label: "Real-time transaction feed", values: ["no", "yes", "yes"] },
    ],
  },
  {
    category: "Portfolio Management",
    features: [
      {
        label: "Dashboard analytics",
        values: ["Basic", "Advanced", "Advanced + Export"],
      },
      { label: "DeFi position tracking", values: ["no", "yes", "yes"] },
      { label: "Yield farming support", values: ["no", "yes", "yes"] },
      { label: "NFT holdings overview", values: ["no", "yes", "yes"] },
      { label: "Token price alerts", values: ["no", "yes", "yes"] },
      { label: "CSV / JSON export", values: ["no", "yes", "yes"] },
    ],
  },
  {
    category: "Security & Governance",
    features: [
      { label: "Hardware wallet support", values: ["yes", "yes", "yes"] },
      { label: "Role-based team access", values: ["no", "yes", "yes"] },
      { label: "Multi-sig wallet support", values: ["no", "yes", "yes"] },
      {
        label: "Activity logging",
        values: ["Basic", "Detailed", "Real-time"],
      },
      { label: "2FA / MFA", values: ["yes", "yes", "yes"] },
      { label: "DAO voting modules", values: ["no", "yes", "Custom"] },
      {
        label: "Compliance (KYC/AML)",
        values: ["Optional", "Optional", "Custom"],
      },
    ],
  },
  {
    category: "Support & Services",
    features: [
      { label: "Email support", values: ["yes", "yes", "yes"] },
      { label: "Community Slack", values: ["no", "yes", "yes"] },
      { label: "Priority support", values: ["no", "yes", "yes"] },
      { label: "Onboarding assistance", values: ["no", "yes", "yes"] },
      {
        label: "Custom integration help",
        values: ["no", "Add-on", "Included"],
      },
      { label: "Knowledge base", values: ["yes", "yes", "yes"] },
      { label: "AI assistant", values: ["no", "yes", "yes"] },
    ],
  },
];
---

<section id="pricing-section">
  <Wrapper variant="standardPaddingless" class="pt-24 border-t-2">
    <div class="max-w-xl mx-auto text-center text-balance">
      <Text
        tag="h2"
        variant="displayLG"
        class="font-medium text-center text-black"
      >
        Plans built for every stage of your DeFi journey
      </Text>
      <Text tag="p" variant="textLG" class="mt-4 text-black">
        Start free. Scale as your protocol, portfolio, or DAO grows.
      </Text>
      <!-- Pricing Toggle -->
      <div
        aria-labelledby="pricing-toggle"
        class="relative z-0 inline-flex justify-center p-1 mx-auto mt-8 gap-4 lg:mx-0 rounded-md w-fit"
      >
        <div
          id="toggle-slider"
          class="absolute inset-0 w-1/2 bg-white border-2 border-black shadow rounded-md transition-transform duration-200 ease-in-out"
        >
        </div>
        <button
          id="monthly-btn"
          class="relative z-10 flex items-center justify-center w-full h-6 px-2 text-base font-medium text-black focus:outline-none transition-colors duration-300"
          type="button"
          aria-pressed="true"
        >
          Monthly
        </button>
        <button
          id="annual-btn"
          class="relative z-10 flex items-center justify-center w-full h-6 px-2 text-base font-medium focus:outline-none transition-colors duration-300"
          type="button"
          aria-pressed="false"
        >
          Annual
        </button>
      </div>
    </div>
    <!-- Pricing Cards -->
    <div
      class="mt-24 border-t-2 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 divide-y-2 divide-black lg:divide-y-0 lg:divide-x-2"
    >
      {
        pricingOptions.map((tier) => (
          <div
            class={`flex flex-col h-full justify-between  ${tier.cardClass}`}
          >
            <div class="flex flex-col ">
              <div class="p-8 ">
                <Text
                  tag="h3"
                  variant="displaySM"
                  class={`font-medium text-black ${tier.primaryTextColor}`}
                >
                  {tier.title}
                </Text>
                <Text
                  variant="displayXL"
                  class={`font-medium flex items-baseline tracking-tighter mt-12 ${tier.primaryTextColor}`}
                >
                  <span
                    class="pricing-amount"
                    data-monthly={tier.monthly}
                    data-annual={tier.annual}
                  >
                    {tier.monthly}
                  </span>
                  <span
                    class={`text-sm font-normal tracking-normal ${tier.secondaryTextColor}`}
                  >
                    <span class="monthly-text">/month</span>
                    <span class="annual-text" style="display: none;">
                      /annually
                    </span>
                  </span>
                </Text>
                <Text
                  tag="p"
                  variant="textLG"
                  class={`mt-2 font-medium text-balance ${tier.secondaryTextColor}`}
                >
                  {tier.description}
                </Text>
              </div>
              <div class={`mt-4 p-8 border-t-2 ${tier.featuresBorderColor}  `}>
                <Text
                  tag="p"
                  variant="textXL"
                  class={`font-medium uppercase ${tier.secondaryTextColor}`}
                >
                  {tier.title === "Momentum"
                    ? "Everything in Core plus:"
                    : "Core plan includes:"}
                </Text>
                <ul
                  class={`flex flex-col mt-4 text-lg font-medium  gap-y-2 ${tier.primaryTextColor}`}
                  role="list"
                >
                  {tier.features.map((feature, index) => (
                    <li class="flex items-start gap-2">
                      <Check
                        size="base"
                        class={`shrink-0 ${tier.secondaryTextColor}`}
                      />
                      <span>{feature.text}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
            <div class="w-full p-8">
              <Button class="w-full" variant={tier.button.variant} size="xl">
                {tier.button.text}
              </Button>
            </div>
          </div>
        ))
      }
    </div>
    <div class="w-full overflow-x-auto">
      <div class="min-w-[768px]">
        <table class="w-full text-lg">
          <thead class="text-center bg-black">
            <tr>
              <th class="px-4 pt-12 pb-2 font-medium text-left text-white"
                >Features</th
              >
              <th class="px-4 pt-12 pb-2 font-medium text-white">Pro</th>
              <th class="px-4 pt-12 pb-2 font-medium text-white">Scale</th>
              <th class="px-4 pt-12 pb-2 font-medium text-white">Enterprise</th>
            </tr>
          </thead>
          <tbody>
            {
              pricingFeatures.map(({ category, features }) => (
                <>
                  <tr class="font-semibold bg-accent-200 ">
                    <td
                      colspan="5"
                      class="px-4 py-8 text-xl font-semibold text-black border-black border-y-2"
                    >
                      {category}
                    </td>
                  </tr>
                  {features.map(({ label, values }) => (
                    <tr class="even:bg-accent-50">
                      <td class="px-4 py-2 text-black">{label}</td>
                      {values.map((value, i) => (
                        <td class="px-4 py-4 text-center text-black">
                          {value === "yes" ? (
                            <X size="sm" class="mx-auto " />
                          ) : value === "no" ? (
                            <Minus size="sm" class="mx-auto" />
                          ) : (
                            value
                          )}
                        </td>
                      ))}
                    </tr>
                  ))}
                </>
              ))
            }
            <tr>
              <td></td>
              <td class="px-4 py-8 text-center text-black">
                <Button class="w-full" variant="default" size="xl">
                  Get started
                </Button>
              </td>
              <td class="px-4 py-8 text-center text-black">
                <Button class="w-full" variant="default" size="xl">
                  Get started
                </Button>
              </td>
              <td class="px-4 py-8 text-center text-black">
                <Button class="w-full" variant="default" size="xl">
                  Get started
                </Button>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </Wrapper>

  <script type="module">
    // Initialize vanilla JS pricing toggle functionality
    document.addEventListener("DOMContentLoaded", function () {
      const monthlyBtn = document.getElementById("monthly-btn");
      const annualBtn = document.getElementById("annual-btn");
      const toggleSlider = document.getElementById("toggle-slider");
      const pricingAmounts = document.querySelectorAll(".pricing-amount");
      const monthlyTexts = document.querySelectorAll(".monthly-text");
      const annualTexts = document.querySelectorAll(".annual-text");
      // accent state is monthly
      let currentDuration = "monthly";
      // Function to update UI based on selected duration
      function updatePricingUI(duration) {
        // Update toggle slider position
        if (duration === "monthly") {
          toggleSlider.style.transform = "translateX(0)";
          monthlyBtn.classList.add("text-base-600");
          monthlyBtn.classList.remove(
            "focus:text-base-900",
            "hover:text-base-900"
          );
          annualBtn.classList.remove("text-base-600");
          annualBtn.classList.add("focus:text-base-900", "hover:text-base-900");
          monthlyBtn.setAttribute("aria-pressed", "true");
          annualBtn.setAttribute("aria-pressed", "false");
        } else {
          toggleSlider.style.transform = "translateX(100%)";
          annualBtn.classList.add("text-base-600");
          annualBtn.classList.remove(
            "focus:text-base-900",
            "hover:text-base-900"
          );
          monthlyBtn.classList.remove("text-base-600");
          monthlyBtn.classList.add(
            "focus:text-base-900",
            "hover:text-base-900"
          );
          monthlyBtn.setAttribute("aria-pressed", "false");
          annualBtn.setAttribute("aria-pressed", "true");
        }
        // Update pricing text
        pricingAmounts.forEach((amount) => {
          amount.textContent = amount.dataset[duration];
        });
        // Show/hide appropriate text
        if (duration === "monthly") {
          monthlyTexts.forEach((text) => (text.style.display = "inline"));
          annualTexts.forEach((text) => (text.style.display = "none"));
        } else {
          monthlyTexts.forEach((text) => (text.style.display = "none"));
          annualTexts.forEach((text) => (text.style.display = "inline"));
        }
        // Update current duration
        currentDuration = duration;
      }
      // Add event listeners to buttons
      monthlyBtn.addEventListener("click", function () {
        updatePricingUI("monthly");
      });
      annualBtn.addEventListener("click", function () {
        updatePricingUI("annual");
      });
      // Initialize UI
      updatePricingUI(currentDuration);
    });
  </script>
</section>
