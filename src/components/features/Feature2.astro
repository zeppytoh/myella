---
// Assets
import Cross from "@/components/assets/Cross.astro";
import StripesBG from "@/components/assets/StripesBG.astro";
// Fundations
import Text from "@/components/fundations/elements/Text.astro";
import Button from "@/components/fundations/elements/Button.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
// Icons
import Play from "@/components/fundations/icons/Play.astro";
---

<section>
  <Wrapper
    variant="standard"
    class="relative pt-24 pb-8 border-t lg:pt-32 border-base-800"
  >
    <!-- Top Right Plus -->
    <Cross class="-top-[0.6rem] -right-[0.65rem]" />
    <!-- Top left Plus -->
    <Cross class="-top-[0.6rem] -left-[0.65rem]" />
    <StripesBG
      variant="base"
      class="absolute inset-0 mt-auto -mx-px border-t border-base-800 h-1/4"
    />
    <div class="relative max-w-2xl text-balance">
      <Text tag="h2" variant="displayMD" class="text-white font-display">
        Clones your voice so well it’s borderline unsettling
      </Text>
      <Text tag="p" variant="textBase" class="mt-4 text-base-500">
        We’re talking high-fidelity, freakishly accurate voice cloning that
        sounds like you — or whoever you want — down to the weird little
        inflections.
      </Text>
    </div>
    <div class="relative flex flex-col mt-12 gap-4">
      <!-- Normal -->
      <div class="p-4 border-b border-white bg-base-900">
        <div class="flex items-center justify-between">
          <div>
            <Text tag="h3" variant="textBase" class="text-white">Normal</Text>
            <Text
              tag="p"
              variant="textXS"
              class="mt-2 text-base-400 text-balance"
            >
              The original voice — clean, clear, and disturbingly accurate.
            </Text>
          </div>
          <Button
            iconOnly
            size="base"
            variant="muted"
            onclick="playWithRealPitch('/audio/sample1.mp3', 0)"
          >
            <Play slot="icon" size="sm" />
          </Button>
        </div>
      </div>

      <!-- Chipmunk -->
      <div class="p-4 border-b border-white bg-base-900">
        <div class="flex items-center justify-between">
          <div>
            <Text tag="h3" variant="textBase" class="text-white">Chipmunk</Text>
            <Text
              tag="p"
              variant="textXS"
              class="mt-2 text-base-400 text-balance"
            >
              A helium-fueled voice that sounds like it just inhaled a balloon.
            </Text>
          </div>
          <Button
            iconOnly
            size="base"
            variant="muted"
            onclick="playWithRealPitch('/audio/sample1.mp3', 7)"
          >
            <Play slot="icon" size="sm" />
          </Button>
        </div>
      </div>

      <!-- Deep -->
      <div class="p-4 border-b border-white bg-base-900">
        <div class="flex items-center justify-between">
          <div>
            <Text tag="h3" variant="textBase" class="text-white">Deep</Text>
            <Text
              tag="p"
              variant="textXS"
              class="mt-2 text-base-400 text-balance"
            >
              Sounds like it belongs in a movie trailer. Gritty, bold, and over
              it.
            </Text>
          </div>
          <Button
            iconOnly
            size="base"
            variant="muted"
            onclick="playWithRealPitch('/audio/sample1.mp3', -5)"
          >
            <Play slot="icon" size="sm" />
          </Button>
        </div>
      </div>
    </div>
  </Wrapper>
</section>
<script type="module">
  let currentSource = null;
  let currentContext = null;
  /**
   * Plays an audio file with pitch shifting using Web Audio API (without speed change).
   * @param {string} src - Path to the audio file
   * @param {number} semitones - Pitch offset (e.g. 0 = normal, 7 = high, -5 = deep)
   */
  window.playWithRealPitch = async function (src, semitones = 0) {
    // Stop any current playback
    if (currentSource) currentSource.stop();
    if (currentContext) currentContext.close();
    // Create new AudioContext
    const context = new (window.AudioContext || window.webkitAudioContext)();
    currentContext = context;
    try {
      // Load and decode the audio file
      const response = await fetch(src);
      const arrayBuffer = await response.arrayBuffer();
      const audioBuffer = await context.decodeAudioData(arrayBuffer);
      // Create a buffer source and apply pitch shift via playbackRate
      const source = context.createBufferSource();
      source.buffer = audioBuffer;
      const ratio = Math.pow(2, semitones / 12); // convert semitones to playbackRate
      source.playbackRate.value = ratio;
      // Connect and play
      source.connect(context.destination);
      source.start(0);
      currentSource = source;
    } catch (err) {
      console.error("Audio playback failed:", err);
    }
  };
</script>
