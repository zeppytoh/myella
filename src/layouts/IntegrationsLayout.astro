---
// Assets
import { Image } from "astro:assets";
import StripesBG from "@/components/assets/StripesBG.astro";
// Fundations
import BaseLayout from "./BaseLayout.astro";
import Text from "@/components/fundations/elements/Text.astro";
import Button from "@/components/fundations/elements/Button.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
// Icons
import Check from "@/components/fundations/icons/Check.astro";
// Content
const { frontmatter } = Astro.props;
---

<BaseLayout>
  <!-- Modal -->
  <div
    id="modal"
    style="display: none"
    role="dialog"
    aria-modal="true"
    aria-labelledby="modal-title"
    class="fixed inset-0 z-50 overflow-y-auto top-50 overflow-hidden"
  >
    <!-- Overlay -->
    <div id="modal-overlay" class="fixed inset-0"></div>
    <!-- Panel -->
    <Wrapper variant="standard" class="relative overflow-hidden">
      <div
        id="modal-content"
        class="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[90%] max-w-2xl bg-base-900 shadow-dimensional z-50 "
      >
        <div class="h-full">
          <div
            class="relative flex flex-col justify-between h-full divide-y divide-base-800"
          >
            <div class="p-8 relative">
              <StripesBG
                variant="light"
                class="absolute inset-0 h-full -mx-px w-[15%] ml-auto"
              />
              <StripesBG
                variant="accent"
                class="absolute inset-0 h-full -mx-px w-[28%] ml-auto"
              />
              <StripesBG
                variant="base"
                class="absolute inset-0 h-full -mx-px w-[50%] ml-auto"
              />
              <div class="relative">
                <Image
                  width={300}
                  height={300}
                  src={frontmatter.logo.url}
                  alt={frontmatter.logo.alt}
                  class="inline-block size-8"
                />
                <Text
                  tag="h3"
                  variant="textXL"
                  id="modal-title"
                  class="mt-12 text-white"
                >
                  Connect {frontmatter.integration} to Flabbergasted
                </Text>
                <Text variant="textSM" class="mt-2 text-base-400 text-balance">
                  Stop guessing what your customers want — prioritize their
                  needs and actually listen for once.
                </Text>
              </div>
            </div>
            <div class="p-8">
              <Text
                tag="p"
                variant="textBase"
                class="font-medium text-left text-white"
              >
                Flabbergasted would like to
              </Text>
              <ul
                role="list"
                class="mt-4 text-sm text-left list-none text-base-400"
              >
                {
                  frontmatter.permissions.map((permission) => (
                    <li class="flex items-center gap-2">
                      <Check size="sm" />
                      {permission}
                    </li>
                  ))
                }
              </ul>
            </div>
            <div class="p-8">
              <Text
                tag="p"
                variant="textXS"
                class="max-w-sm text-left text-base-500"
              >
                *We take your privacy seriously — no weird stuff. Check out our
                <a
                  class="text-base-500 hover:text-white"
                  href="/infopages/privacy"
                >
                  Privacy Policy
                </a>. By clicking "Allow access," you're saying, "Yeah, I trust
                you" — and we won't mess that up.
              </Text>

              <div class="flex flex-wrap mt-12 ml-auto gap-2">
                <Button
                  size="sm"
                  variant="muted"
                  type="button"
                  id="close-modal"
                >
                  Cancel
                </Button>
                <Button size="sm" variant="alternative" type="submit">
                  Allow access
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Wrapper>
  </div>
  <section>
    <Wrapper
      variant="paddinglessDesktop"
      class="relative pt-48 lg:pt-40 overflow-hidden"
    >
      <StripesBG
        variant="base"
        class="absolute inset-0 h-24 p-20 -mx-px border-b border-base-800"
      />
      <div class="relative grid grid-cols-1 gap-8 lg:grid-cols-3">
        <div class="text-balance lg:p-8">
          <Image
            width={300}
            height={300}
            src={frontmatter.logo.url}
            alt={frontmatter.logo.alt}
            class="inline-block size-8"
          />
          <Text tag="h1" variant="textBase" class="text-white mt-12">
            {frontmatter.integration}
          </Text>
          <Text tag="p" variant="textSM" class="mt-4 text-base-400">
            {frontmatter.description}
          </Text>
          <dl class="flex flex-col mt-8 divide-y divide-base-800">
            {
              frontmatter.details.map((detail) => (
                <div class="flex items-center justify-between py-2 gap-2">
                  <dt>
                    <Text
                      tag="h4"
                      variant="textSM"
                      class="font-medium text-white"
                    >
                      {detail.title}
                    </Text>
                  </dt>
                  <dd>
                    <Text
                      tag="p"
                      variant="textSM"
                      class="capitalize text-base-500 lg:text-balance"
                    >
                      {detail.url ? (
                        <a
                          class="text-white hover:text-base-500 duration-300 "
                          href={detail.url}
                        >
                          {detail.value}
                        </a>
                      ) : (
                        detail.value
                      )}
                    </Text>
                  </dd>
                </div>
              ))
            }
          </dl>
          <Button size="sm" variant="muted" id="open-modal" class="mt-8 w-fit">
            Connect {frontmatter.integration}
          </Button>
        </div>

        <Wrapper
          variant="prose"
          class="lg:col-span-2 lg:border-l lg:border-base-800 lg:p-8"
          ><slot /></Wrapper
        >
      </div>
    </Wrapper>
  </section>
  <script type="module">
    //
    // Modal Component Script
    //
    // This script handles the functionality of a modal dialog with the following features:
    // Opens/closes modal with animation
    // Prevents background scrolling when modal is open
    // Closes on outside click, escape key, or close button
    // Handles scrollbar width to prevent layout shift
    document.addEventListener("DOMContentLoaded", () => {
      // Store all modal-related DOM elements in a single object for better organization
      const modal = {
        element: document.getElementById("modal"), // Main modal container
        openButton: document.getElementById("open-modal"), // Button to open modal
        closeButton: document.getElementById("close-modal"), // Button to close modal
        content: document.getElementById("modal-content"), // Modal content container
      };
      // Toggles the modal visibility and handles body scroll
      // @param {boolean} show - True to show modal, false to hide
      const toggleModal = (show) => {
        // Calculate scrollbar width to prevent layout shift when body scroll is disabled
        const scrollbarWidth =
          window.innerWidth - document.documentElement.clientWidth;
        // Toggle body scroll and compensate for scrollbar removal
        document.body.style.overflow = show ? "hidden" : "";
        document.body.style.paddingRight = show ? `${scrollbarWidth}px` : "";
        // Show/hide modal
        modal.element.style.display = show ? "block" : "none";
      };
      // Event Listeners
      // Opens modal when trigger button is clicked
      modal.openButton.addEventListener("click", () => toggleModal(true));
      // Closes modal when close button is clicked
      modal.closeButton.addEventListener("click", () => toggleModal(false));
      // Handles clicks on the modal backdrop
      // Closes modal when clicking outside the modal content area
      modal.element.addEventListener("click", (event) => {
        // Check if click occurred outside modal content
        // contains() checks if the clicked element is inside the modal content
        if (!modal.content.contains(event.target)) {
          toggleModal(false);
        }
      });
      // Global keyboard event handler
      // Closes modal when Escape key is pressed and modal is visible
      document.addEventListener("keydown", (event) => {
        if (event.key === "Escape" && modal.element.style.display === "block") {
          toggleModal(false);
        }
      });
    });
  </script>
</BaseLayout>
